// <auto-generated />
using System;
using BaseballCommander.Data.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseballCommander.Data.EFCore.Migrations
{
    [DbContext(typeof(BaseballCommanderContext))]
    [Migration("20180830233750_AddedUserIsActive")]
    partial class AddedUserIsActive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.League", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.NameGeneratorSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("TimeEntered");

                    b.HasKey("Id");

                    b.ToTable("NameGeneratorSource");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("FirstName");

                    b.Property<string>("GeneralPosition");

                    b.Property<Guid>("Guid");

                    b.Property<string>("LastName");

                    b.Property<string>("Status");

                    b.Property<long?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.PlayerAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long?>("PlayerId");

                    b.Property<double>("PotentialValue");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerAttribute");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.Roster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("PlayerId");

                    b.Property<string>("RosterType");

                    b.Property<long?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Roster");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<Guid>("Guid");

                    b.Property<long?>("LeagueId");

                    b.Property<string>("Name");

                    b.Property<string>("Nickname");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.TeamPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Permission");

                    b.Property<string>("Role");

                    b.Property<long?>("TeamId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamPermission");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.Player", b =>
                {
                    b.HasOne("BaseballCommander.Data.EFCore.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.PlayerAttribute", b =>
                {
                    b.HasOne("BaseballCommander.Data.EFCore.Entities.Player", "Player")
                        .WithMany("PlayerAttributes")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.Roster", b =>
                {
                    b.HasOne("BaseballCommander.Data.EFCore.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("BaseballCommander.Data.EFCore.Entities.Team", "Team")
                        .WithMany("Rosters")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.Team", b =>
                {
                    b.HasOne("BaseballCommander.Data.EFCore.Entities.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("BaseballCommander.Data.EFCore.Entities.TeamPermission", b =>
                {
                    b.HasOne("BaseballCommander.Data.EFCore.Entities.Team", "Team")
                        .WithMany("TeamPermissions")
                        .HasForeignKey("TeamId");

                    b.HasOne("BaseballCommander.Data.EFCore.Entities.User", "User")
                        .WithMany("TeamPermissions")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
